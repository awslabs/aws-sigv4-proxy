name: Docker to ECR
description: Push Docker image to ECR
inputs:
  repository:
    description: 'repository name created inside ecr'
    required: true
  work-dir:
    description: 'working directory where to build the Dockerfile'
    required: true
  aws-access-key-id:
    description: 'aws access key id'
    required: true
  aws-secret-access-key:
    description: 'aws secret access key'
    required: true
  aws-region:
    description: 'aws region'
    required: true
    default: us-east-1
  role-to-assume:
    description: 'aws role to assume'
    required: true
  aws-ecr-policy:
    description: 'aws-ecr-policy'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.role-to-assume }}
        role-duration-seconds: 1200
        role-skip-session-tagging: true
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
      id: ecr
    - name: Build, tag, and push image to Amazon ECR
      shell: bash
      env:
        ECR_REPOSITORY: ${{ inputs.repository }}
        ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
        ECR_POLICY: '${{ inputs.aws-ecr-policy }}'
        IMAGE_TAG: ${{ github.sha }}
      run: |
        aws --version
        aws ecr create-repository --repository-name $ECR_REPOSITORY || true
        echo $ECR_POLICY > repository-policy.json
        aws ecr set-repository-policy --repository-name $ECR_REPOSITORY --policy-text file://repository-policy.json
        cd ${{ inputs.work-dir }}
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
